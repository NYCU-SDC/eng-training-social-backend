// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package post

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO posts (title, content) VALUES ($1, $2) RETURNING id, title, content, created_at, updated_at
`

type CreateParams struct {
	Title   pgtype.Text
	Content pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Post, error) {
	row := q.db.QueryRow(ctx, create, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, title, content, created_at, updated_at FROM posts
`

func (q *Queries) GetAll(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, title, content, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE posts SET title = $1, content = $2, updated_at = now() WHERE id = $3 RETURNING id, title, content, created_at, updated_at
`

type UpdateParams struct {
	Title   pgtype.Text
	Content pgtype.Text
	ID      uuid.UUID
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Post, error) {
	row := q.db.QueryRow(ctx, update, arg.Title, arg.Content, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
